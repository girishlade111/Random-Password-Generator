<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Password Generator</title>
    <style>
        /* Basic Reset & Global Styles */
        :root {
            --primary-color: #007bff;
            --primary-hover-color: #0056b3;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --light-gray: #f8f9fa;
            --medium-gray: #dee2e6;
            --dark-gray: #343a40;
            --text-color: #212529;
            --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            --border-radius: 0.3rem;
            --transition-speed: 0.2s;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: var(--font-family);
            background-color: var(--light-gray);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
        }

        /* Main Container */
        .container {
            background-color: #fff;
            padding: 25px 30px;
            border-radius: var(--border-radius);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
        }

        h1 {
            text-align: center;
            color: var(--dark-gray);
            margin-bottom: 25px;
            font-size: 1.8rem;
        }

        /* Password Display Area */
        .password-display-area {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            position: relative;
        }

        #passwordDisplay {
            flex-grow: 1;
            padding: 12px 15px;
            font-size: 1.1rem;
            font-family: 'Courier New', Courier, monospace; /* Monospace for passwords */
            border: 1px solid var(--medium-gray);
            border-radius: var(--border-radius);
            background-color: var(--light-gray);
            color: var(--dark-gray);
            outline: none;
            user-select: all; /* Allow easy selection */
        }

        #copyButton {
            padding: 12px 15px;
            margin-left: 10px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: background-color var(--transition-speed) ease;
            font-size: 0.9rem;
        }

        #copyButton:hover {
            background-color: var(--primary-hover-color);
        }

        #copyFeedback {
            position: absolute;
            bottom: -22px; /* Position below the display area */
            left: 0;
            font-size: 0.85rem;
            color: var(--success-color);
            opacity: 0;
            transition: opacity var(--transition-speed) ease;
        }
        #copyFeedback.show {
            opacity: 1;
        }

        /* Controls Section */
        .controls {
            margin-bottom: 20px;
        }

        .control-group {
            margin-bottom: 18px;
        }

        .control-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #495057;
        }

        /* Length Slider */
        .length-control {
            display: flex;
            align-items: center;
        }

        #length {
            flex-grow: 1;
            margin-right: 15px;
            cursor: pointer;
            -webkit-appearance: none;
            appearance: none;
            height: 8px;
            background: var(--medium-gray);
            border-radius: 5px;
            outline: none;
        }
        #length::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: var(--primary-color);
            border-radius: 50%;
            cursor: pointer;
        }
        #length::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: var(--primary-color);
            border-radius: 50%;
            cursor: pointer;
            border: none;
        }

        #lengthValue {
            font-weight: bold;
            min-width: 25px; /* Ensure space for two digits */
            text-align: right;
        }

        /* Checkbox Toggles */
        .checkbox-group label {
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 8px 0;
            font-weight: normal; /* Override general label */
            transition: background-color var(--transition-speed) ease;
            border-radius: var(--border-radius);
        }
        .checkbox-group label:hover {
            background-color: #f0f0f0;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
            width: 18px;
            height: 18px;
            accent-color: var(--primary-color); /* Modern checkbox color */
        }

        /* Password Strength Indicator */
        #strengthIndicator {
            display: flex;
            height: 10px;
            border-radius: var(--border-radius);
            overflow: hidden;
            margin-bottom: 20px;
            background-color: var(--medium-gray); /* Background for empty part */
        }

        .strength-bar {
            height: 100%;
            width: 0%; /* Start with 0 width */
            transition: width var(--transition-speed) ease-out, background-color var(--transition-speed) ease-out;
        }

        .strength-bar.weak { background-color: var(--danger-color); }
        .strength-bar.medium { background-color: var(--warning-color); }
        .strength-bar.strong { background-color: var(--success-color); }
        .strength-bar.very-strong { background-color: #17a2b8; } /* A bit darker cyan for very strong */


        /* Action Buttons */
        .action-buttons {
            display: flex;
            justify-content: space-between; /* For generate and regenerate */
        }

        .btn {
            padding: 12px 20px;
            font-size: 1rem;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: background-color var(--transition-speed) ease, transform var(--transition-speed) ease;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .btn:active {
            transform: translateY(0);
        }

        #generateButton {
            background-color: var(--success-color);
            color: white;
            flex-grow: 1; /* Make it take available space if only one button */
        }
        #generateButton:hover {
            background-color: #1e7e34;
        }
        /* If you add regenerate button, style it here */
        /* #regenerateButton { background-color: var(--primary-color); color: white; } */

        /* Error Messages */
        #errorMessages {
            color: var(--danger-color);
            font-size: 0.9rem;
            margin-top: 15px;
            min-height: 1.2em; /* Reserve space to prevent layout shift */
            text-align: center;
        }

        /* Accessibility */
        *:focus-visible { /* Modern focus outline */
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }
        /* For older browsers or specific needs */
        button:focus, input[type="range"]:focus, input[type="checkbox"]:focus {
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }


        /* Responsive Adjustments */
        @media (max-width: 480px) {
            .container {
                padding: 20px;
            }
            h1 {
                font-size: 1.6rem;
            }
            #passwordDisplay {
                font-size: 1rem;
            }
            .password-display-area {
                flex-direction: column; /* Stack password and copy button */
            }
            #copyButton {
                margin-left: 0;
                margin-top: 10px;
                width: 100%;
            }
            #copyFeedback {
                position: static; /* Reset position */
                text-align: center;
                margin-top: 5px;
            }
            .btn {
                padding: 10px 15px;
                font-size: 0.9rem;
            }
        }

    </style>
</head>
<body>

    <div class="container" role="main">
        <h1>Random Password Generator</h1>

        <div class="password-display-area">
            <input type="text" id="passwordDisplay" readonly aria-label="Generated Password">
            <button id="copyButton" aria-label="Copy password to clipboard">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" aria-hidden="true">
                    <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                    <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
                </svg> Copy
            </button>
            <span id="copyFeedback" aria-live="polite"></span>
        </div>

        <div id="strengthIndicator" role="meter" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" aria-label="Password strength">
            <div class="strength-bar"></div>
        </div>

        <div class="controls">
            <div class="control-group">
                <label for="length">Password Length: <span id="lengthValue">12</span></label>
                <div class="length-control">
                    <input type="range" id="length" min="8" max="64" value="12" aria-labelledby="lengthValue">
                </div>
            </div>

            <div class="control-group checkbox-group">
                <label for="includeUppercase">
                    <input type="checkbox" id="includeUppercase" checked> Include Uppercase (A-Z)
                </label>
                <label for="includeLowercase">
                    <input type="checkbox" id="includeLowercase" checked> Include Lowercase (a-z)
                </label>
                <label for="includeNumbers">
                    <input type="checkbox" id="includeNumbers" checked> Include Numbers (0-9)
                </label>
                <label for="includeSymbols">
                    <input type="checkbox" id="includeSymbols" checked> Include Symbols (@#$%)
                </label>
            </div>
             <div class="control-group checkbox-group">
                <label for="excludeAmbiguous">
                    <input type="checkbox" id="excludeAmbiguous"> Exclude Ambiguous Characters (I, l, 1, O, 0)
                </label>
            </div>
        </div>

        <div class="action-buttons">
            <button id="generateButton" class="btn">Generate Password</button>
            <!-- <button id="regenerateButton" class="btn">Regenerate</button> -->
            <!-- Regenerate is essentially same as Generate, so one button is fine or
                 you can enable regenerate after first generation and style it differently -->
        </div>
        
        <div id="errorMessages" aria-live="assertive"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // DOM Elements
            const passwordDisplay = document.getElementById('passwordDisplay');
            const copyButton = document.getElementById('copyButton');
            const copyFeedback = document.getElementById('copyFeedback');
            const lengthSlider = document.getElementById('length');
            const lengthValueDisplay = document.getElementById('lengthValue');
            const includeUppercaseCheckbox = document.getElementById('includeUppercase');
            const includeLowercaseCheckbox = document.getElementById('includeLowercase');
            const includeNumbersCheckbox = document.getElementById('includeNumbers');
            const includeSymbolsCheckbox = document.getElementById('includeSymbols');
            const excludeAmbiguousCheckbox = document.getElementById('excludeAmbiguous');
            const generateButton = document.getElementById('generateButton');
            const strengthIndicator = document.getElementById('strengthIndicator');
            const strengthBar = strengthIndicator.querySelector('.strength-bar');
            const errorMessagesDiv = document.getElementById('errorMessages');

            // Character Sets
            const UPPERCASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const LOWERCASE_CHARS = "abcdefghijklmnopqrstuvwxyz";
            const NUMBER_CHARS = "0123456789";
            const SYMBOL_CHARS = "!@#$%^&*()_+-=[]{}|;:',.<>/?`~";
            const AMBIGUOUS_CHARS = "Il1O0";

            /**
             * Generates a cryptographically secure random number.
             * @param {number} max - The maximum value (exclusive).
             * @returns {number} A random integer between 0 and max - 1.
             */
            function getRandomInt(max) {
                const randomBuffer = new Uint32Array(1);
                window.crypto.getRandomValues(randomBuffer);
                return randomBuffer[0] % max;
            }

            /**
             * Generates a random password based on selected criteria.
             */
            function generatePassword() {
                // Clear previous errors
                errorMessagesDiv.textContent = '';
                passwordDisplay.style.borderColor = 'var(--medium-gray)';


                const length = parseInt(lengthSlider.value);
                let characterPool = "";
                let guaranteedChars = ""; // To ensure at least one of each selected type

                if (includeUppercaseCheckbox.checked) {
                    let chars = UPPERCASE_CHARS;
                    if (excludeAmbiguousCheckbox.checked) {
                        chars = chars.split('').filter(char => !AMBIGUOUS_CHARS.includes(char)).join('');
                    }
                    if (chars.length > 0) {
                        characterPool += chars;
                        guaranteedChars += chars[getRandomInt(chars.length)];
                    }
                }
                if (includeLowercaseCheckbox.checked) {
                    let chars = LOWERCASE_CHARS;
                    if (excludeAmbiguousCheckbox.checked) {
                        chars = chars.split('').filter(char => !AMBIGUOUS_CHARS.includes(char)).join('');
                    }
                     if (chars.length > 0) {
                        characterPool += chars;
                        guaranteedChars += chars[getRandomInt(chars.length)];
                    }
                }
                if (includeNumbersCheckbox.checked) {
                    let chars = NUMBER_CHARS;
                    if (excludeAmbiguousCheckbox.checked) {
                        chars = chars.split('').filter(char => !AMBIGUOUS_CHARS.includes(char)).join('');
                    }
                     if (chars.length > 0) {
                        characterPool += chars;
                        guaranteedChars += chars[getRandomInt(chars.length)];
                    }
                }
                if (includeSymbolsCheckbox.checked) {
                    let chars = SYMBOL_CHARS;
                     if (chars.length > 0) { // Ambiguous typically not in symbols, but could be added
                        characterPool += chars;
                        guaranteedChars += chars[getRandomInt(chars.length)];
                    }
                }

                if (characterPool === "") {
                    errorMessagesDiv.textContent = "Error: Please select at least one character type.";
                    passwordDisplay.value = "";
                    passwordDisplay.style.borderColor = 'var(--danger-color)';
                    updatePasswordStrength(""); // Clear strength
                    return;
                }
                
                // Ensure length is not less than the number of guaranteed characters
                const minLengthForGuaranteed = guaranteedChars.length;
                if (length < minLengthForGuaranteed) {
                    // This scenario is unlikely with default length 8 and multiple types selected
                    // but good to handle. Could auto-adjust length or show error.
                    // For simplicity, we'll proceed, but the password might not contain all types if length is too small.
                    // Better: fill with guaranteed, then add random up to length.
                }


                let password = "";
                // Add guaranteed characters first, then fill the rest
                password += guaranteedChars;

                const remainingLength = length - guaranteedChars.length;
                for (let i = 0; i < remainingLength; i++) {
                    password += characterPool[getRandomInt(characterPool.length)];
                }
                
                // Shuffle the password to make positions of guaranteed chars random
                password = password.split('').sort(() => 0.5 - Math.random()).join(''); // Simple shuffle
                                                                                      // A more crypto-secure shuffle (Fisher-Yates) could be used if needed,
                                                                                      // but for password generation this simple shuffle is generally acceptable.

                passwordDisplay.value = password;
                updatePasswordStrength(password);
            }

            /**
             * Updates the visual password strength indicator.
             * @param {string} password - The password to assess.
             */
            function updatePasswordStrength(password) {
                let score = 0;
                const length = password.length;

                if (length === 0) {
                    strengthBar.className = 'strength-bar';
                    strengthBar.style.width = '0%';
                    strengthIndicator.setAttribute('aria-valuenow', '0');
                    strengthIndicator.setAttribute('aria-label', 'Password strength: None');
                    return;
                }
                
                // Length score
                if (length >= 8) score++;
                if (length >= 12) score++;
                if (length >= 16) score++;

                // Complexity score
                if (/[A-Z]/.test(password)) score++;
                if (/[a-z]/.test(password)) score++;
                if (/[0-9]/.test(password)) score++;
                if (/[^A-Za-z0-9]/.test(password)) score++; // Symbols

                let strengthClass = '';
                let strengthText = 'Weak';
                let strengthValue = 0;

                if (score < 3) { // e.g. <8 chars OR 8 chars but only one type
                    strengthClass = 'weak';
                    strengthBar.style.width = '25%';
                    strengthValue = 25;
                } else if (score < 5) { // e.g. 8-11 chars with multiple types OR long with few types
                    strengthClass = 'medium';
                    strengthBar.style.width = '50%';
                    strengthText = 'Medium';
                    strengthValue = 50;
                } else if (score < 7) { // e.g. 12-15 chars with high complexity
                    strengthClass = 'strong';
                    strengthBar.style.width = '75%';
                    strengthText = 'Strong';
                    strengthValue = 75;
                } else { // e.g. >=16 chars with high complexity
                    strengthClass = 'very-strong';
                    strengthBar.style.width = '100%';
                    strengthText = 'Very Strong';
                    strengthValue = 100;
                }
                
                strengthBar.className = 'strength-bar ' + strengthClass;
                strengthIndicator.setAttribute('aria-valuenow', strengthValue.toString());
                strengthIndicator.setAttribute('aria-label', `Password strength: ${strengthText}`);
            }

            /**
             * Copies the generated password to the clipboard.
             */
            function copyToClipboard() {
                if (!passwordDisplay.value) {
                    copyFeedback.textContent = "Nothing to copy!";
                    copyFeedback.style.color = 'var(--warning-color)';
                } else {
                    navigator.clipboard.writeText(passwordDisplay.value)
                        .then(() => {
                            copyFeedback.textContent = "Copied to clipboard!";
                            copyFeedback.style.color = 'var(--success-color)';
                        })
                        .catch(err => {
                            copyFeedback.textContent = "Failed to copy.";
                            copyFeedback.style.color = 'var(--danger-color)';
                            console.error('Failed to copy password: ', err);
                            // Fallback for older browsers if navigator.clipboard is not available (less common now)
                            // passwordDisplay.select();
                            // document.execCommand('copy');
                        });
                }
                
                copyFeedback.classList.add('show');
                setTimeout(() => {
                    copyFeedback.classList.remove('show');
                }, 2000);
            }

            // Event Listeners
            lengthSlider.addEventListener('input', () => {
                lengthValueDisplay.textContent = lengthSlider.value;
                generatePassword(); // Regenerate on length change
            });

            [includeUppercaseCheckbox, includeLowercaseCheckbox, includeNumbersCheckbox, includeSymbolsCheckbox, excludeAmbiguousCheckbox].forEach(checkbox => {
                checkbox.addEventListener('change', generatePassword);
            });

            generateButton.addEventListener('click', generatePassword);
            copyButton.addEventListener('click', copyToClipboard);

            // Initial password generation on page load
            generatePassword();
        });
    </script>
</body>
</html>
